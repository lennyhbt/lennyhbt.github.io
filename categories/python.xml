<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>v2h (python)</title><link>http://qytz.github.io/</link><description></description><atom:link rel="self" href="http://qytz.github.io/categories/python.xml" type="application/rss+xml"></atom:link><language>zh_cn</language><lastBuildDate>Tue, 30 Aug 2016 07:46:11 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Python 3 bytes 类型的decode问题</title><link>http://qytz.github.io/posts/tech/python3_bytes_decode/</link><dc:creator>lennyh</dc:creator><description>&lt;div&gt;&lt;div class="section" id="python-3-bytes-decode"&gt;
&lt;h2&gt;Python 3 Bytes.decode遇到的问题&lt;/h2&gt;
&lt;p&gt;使用 &lt;em&gt;Python 3&lt;/em&gt; 的 &lt;cite&gt;Subprocess&lt;/cite&gt; 模块执行shell命令，读取到的结果的类型是 &lt;cite&gt;bytes&lt;/cite&gt; ，如果是文本需要转成 &lt;cite&gt;str&lt;/cite&gt; 类型。&lt;/p&gt;
&lt;p&gt;一般来说，Linux的中文环境大都使用 &lt;em&gt;utf-8&lt;/em&gt; 编码，我执行操作的系统也确实使用的 &lt;em&gt;utf-8&lt;/em&gt; 编码，然后还是遇到了问题……&lt;/p&gt;
&lt;p&gt;即使是使用了 &lt;em&gt;utf-8&lt;/em&gt; 编码，我们的文件名仍然可能会产生乱码，比如我们执行 &lt;cite&gt;ls&lt;/cite&gt; 可能会看到这样的文件名:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
OITS??ѵ--????.mp4
&lt;/pre&gt;
&lt;p&gt;而如果使用 &lt;cite&gt;Subprocess&lt;/cite&gt; 模块执行 &lt;cite&gt;ls&lt;/cite&gt; 命令，则 &lt;cite&gt;result.decode("utf-8")&lt;/cite&gt; 会报 &lt;em&gt;UnicodeDecodeError&lt;/em&gt; 异常，
初见这个问题我非常惊讶，应该 &lt;em&gt;utf-8&lt;/em&gt; 可以编码所有的字符了吧，为啥我用 &lt;em&gt;utf-8&lt;/em&gt; decode 还会出现这样的问题。&lt;/p&gt;
&lt;p&gt;我觉得出现这个问题的原因很可能是，&lt;em&gt;Linux&lt;/em&gt; 文件系统使用的 &lt;em&gt;utf-8&lt;/em&gt; 编码保存文件名，但是 &lt;strong&gt;该文件是从Windows的文件系统拷贝过来&lt;/strong&gt; ，
而 &lt;strong&gt;Windows 文件系统的默认编码则是不是 utf-8&lt;/strong&gt; ，这样我们在 &lt;em&gt;shell&lt;/em&gt; 执行 &lt;cite&gt;ls&lt;/cite&gt; 命令时显示的就是乱码字符了，
因为我们的文件系统是存的 &lt;em&gt;utf-8&lt;/em&gt; 编码的文件名，自然该文件名也是按照 &lt;em&gt;utf-8&lt;/em&gt; 来解码输出。&lt;/p&gt;
&lt;p&gt;要解决这个问题也不是很麻烦，参考资料1 的答案很清楚，要么使用兼容的 &lt;em&gt;cp437/latin-1&lt;/em&gt; 解码，要么使用 &lt;em&gt;utf-8&lt;/em&gt; 解码时进行容错处理。&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_5505116e906d48e1a300d5df92a086cf-1"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\xc5\xe0\xd1\xb5&lt;/span&gt;&lt;span class="s1"&gt;--&lt;/span&gt;&lt;span class="se"&gt;\xd1\xee\xc0\xa5&lt;/span&gt;&lt;span class="s1"&gt;.mp4'&lt;/span&gt;
&lt;a name="rest_code_5505116e906d48e1a300d5df92a086cf-2"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"utf-8"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"surrogateescape"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_5505116e906d48e1a300d5df92a086cf-3"&gt;&lt;/a&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\udcc5\udce0&lt;/span&gt;&lt;span class="s1"&gt;ѵ--&lt;/span&gt;&lt;span class="se"&gt;\udcd1\udcee\udcc0\udca5&lt;/span&gt;&lt;span class="s1"&gt;.mp4'&lt;/span&gt;
&lt;a name="rest_code_5505116e906d48e1a300d5df92a086cf-4"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"cp437"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_5505116e906d48e1a300d5df92a086cf-5"&gt;&lt;/a&gt;&lt;span class="s1"&gt;'┼α╤╡--╤ε└Ñ.mp4'&lt;/span&gt;
&lt;a name="rest_code_5505116e906d48e1a300d5df92a086cf-6"&gt;&lt;/a&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"latin-1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_5505116e906d48e1a300d5df92a086cf-7"&gt;&lt;/a&gt;&lt;span class="s1"&gt;'ÅàÑµ--ÑîÀ¥.mp4'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/a/27527728/6773188"&gt;Convert bytes to a Python string&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0383/"&gt;PEP 383 -- Non-decodable Bytes in System Character Interfaces&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>python</category><category>tech</category><guid>http://qytz.github.io/posts/tech/python3_bytes_decode/</guid><pubDate>Tue, 30 Aug 2016 07:16:00 GMT</pubDate></item></channel></rss>