<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>v2h</title><link>http://qytz.github.io/</link><description>All about my history, now and future.</description><atom:link href="http://qytz.github.io/rss.xml" type="application/rss+xml" rel="self"></atom:link><language>zh_cn</language><lastBuildDate>Mon, 08 Aug 2016 08:44:57 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>天津见闻奇异录</title><link>http://qytz.github.io/posts/tian-jin-jian-wen-qi-yi-lu/</link><dc:creator>lennyh</dc:creator><description>&lt;div&gt;&lt;p&gt;今天下午请假帮朋友去天津办事，心里想着反正请了半天假，索性事情完了以后在天津转转，缓解一下最近疲惫的心神。
事情办的倒是很顺利，但是办完还是已经下午四点半了，即使马上回来也不算太早，爱玩的我还是禁不住诱惑转到晚上八点多才返回。
虽然时间不长，还是有几件有趣的事值得记录下来。&lt;/p&gt;
&lt;p&gt;遗憾的是手机几乎没电，基本上没拍照片。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;目测天津街上蹬自行车（非电动车）的多不少，而且自行车比电动车的比例也不低。
北京的自行车也很少（除了那些玩骑行的~），而在我们老家农村，自行车基本上被电动车淘汰……
而天津人蹬自行车，往往越是路口蹬的越快，和汽车抢道抢速度，反而是普通路面蹬的随意了。&lt;/li&gt;
&lt;li&gt;去逛南开，意外的发现了几个练武术的人（应该是老师和学生），而且还是在练形意拳。
比较有趣的是有个老师在教兵器（应该是剑），用的却是很普通普遍的木棍，着实有影视作品中侠之大者的风范。
算上上次去南京在玄武湖旁边遇到练形意拳的姑娘，最近半年去过的两个地方都遇到了练形意拳的。
由此推断，目前武术没有我们平时说的那么不堪，练习的人还是挺多的；形意拳却是算得上比较大的拳种了。&lt;/li&gt;
&lt;li&gt;之前一直知道北师大和北邮之间只隔了一条很窄的马路，西门对东门，是很近的了。逛了南开跟天大才发现，两所学校仅一楼之隔。
而且隔开两所学校的楼应该是两所学校共用的，这边写着南开，那边写着天大。
但是感受到的两所学校的气质却完全不一样，天大相对新气，南开则更富底蕴，距离之近差别之大十分惊奇，个人感受而已。&lt;/li&gt;
&lt;li&gt;吃到了正宗的清真菜，并不是说味道正宗，而是对清真的严格执行。
逛完南开天大又转了一圈水上公园，走的实在累了，想找个小馆子吃个盖饭来瓶啤酒，无奈公园边转了半天找不到，走了大老远才找到一家清真拉面馆。
心想拉面馆应该会有盖饭跟啤酒啊（在北京习惯了~），但是点完盖饭之后却没找打啤酒，点完山海关（类似北冰洋的饮料）才发现后厨的门口写着清真菜馆严禁外带食品，严禁喝酒。
在北京好像还没吃到过禁酒的菜馆，当真是馆子虽小，但人家开的认真啊。&lt;/li&gt;
&lt;li&gt;天津地铁单次卡是小圆盘，背面写的是“国有资产，用后回收”，国有资产……&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在水上公园转的时候应该是看到天津之眼了，不过没开灯~&lt;/p&gt;
&lt;p&gt;京津虽近，差别却很大，很有趣。&lt;/p&gt;&lt;/div&gt;</description><category>凡思</category><guid>http://qytz.github.io/posts/tian-jin-jian-wen-qi-yi-lu/</guid><pubDate>Tue, 15 Mar 2016 15:21:15 GMT</pubDate></item><item><title>春节红包总结</title><link>http://qytz.github.io/posts/chun-jie-hong-bao-zong-jie/</link><dc:creator>lennyh</dc:creator><description>&lt;div&gt;&lt;p&gt;今年春节因了支付宝的敬业福以及微信的影响，到处一片抢红包的繁荣气象。除夕晚本是万家团员吃饭聊天的好时候，
现实中的场景却是未见聊天低头，都在低着头刷微信红包，玩支付宝的咻一咻。对于我来说，今年也没有看春晚的心情了，
对春晚少了很多期待把。&lt;/p&gt;
&lt;p&gt;除夕晚上，突发奇想，做一个收发红包的小统计调查吧。方法如下：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;时间以除夕到初一为界；&lt;/li&gt;
&lt;li&gt;选择疏落的微信好友，首先向该好友发送一条聊天消息/表情，作为开始；&lt;/li&gt;
&lt;li&gt;若收到回复，向该好友发送金额不等的拜年红包；&lt;/li&gt;
&lt;li&gt;若好友互动则继续聊家常；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作出以下统计：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;发出初始互动消息数量：60&lt;/li&gt;
&lt;li&gt;发出红包的份数：37&lt;/li&gt;
&lt;li&gt;收到红包的份数：17&lt;/li&gt;
&lt;li&gt;发出红包金额大于收到红包金额的份数：8&lt;/li&gt;
&lt;li&gt;收到红包金额大于发出红包金额的份数：7&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分析如下:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;未回复消息数量：23，比预想中的数量略大，猜测原因为部分人过年忙着玩/与家人聊家常/还不习惯微信红包拜年这种方式；&lt;/li&gt;
&lt;li&gt;收到红包数量：17，红包收发比为17/37，比预想中低，原因不明，可能为部分好友平时联系较多/习惯了收红包，但并不习惯红包拜年这种方式；&lt;/li&gt;
&lt;li&gt;收到红包金额大小比：8/7，与预期吻合，微信拜年红包设计就是金额随机。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比较有意思的一些事：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;腾讯的服务器可能出现了问题，部分在聊天中已经领取过的红包，在统计时显示为该红包超时未领取，不知道真实情况到底领没领到……&lt;/li&gt;
&lt;li&gt;极少数红包为在未收到回复时发送，极极少数的情况时红包超过领取时间后收到了回复……&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第一次做这样的统计分析，想想还真的有点儿小激动，以上统计与分析纯属娱乐，如能帮到你纯属巧合。&lt;/p&gt;
&lt;p&gt;最后感谢所有那些回复/聊天及发红包给我的朋友们:)&lt;/p&gt;&lt;/div&gt;</description><category>凡思</category><guid>http://qytz.github.io/posts/chun-jie-hong-bao-zong-jie/</guid><pubDate>Thu, 03 Mar 2016 12:38:56 GMT</pubDate></item><item><title>思维方式的改变是一件细思恐级的事</title><link>http://qytz.github.io/posts/si-wei-fang-shi-de-gai-bian-shi-yi-jian-xi-si-kong-ji-de-shi/</link><dc:creator>lennyh</dc:creator><description>&lt;div&gt;&lt;p&gt;思维方式的改变是潜移默化的发生的，在你意识到改变前已经发生了。之所以恐怖是因为，你无法确切知道它是往何方向改变，有时候甚至会与你以前的思维方式相冲突。
而这种改变是说不上好坏的。当然没有无缘无故的改变，有果必有因，这些改变肯定与你的经历有关，是你的经历循序渐进的改变了你。&lt;/p&gt;
&lt;p&gt;韩寒的电影《后会无期》中那句“小孩才分对错，大人只看利弊”，谁能说的清是好是坏呢。也许只是往有利的方向发展了，但是何尝不是带着一种悲凉呢。
孩童时期的那份单纯天真也许是无法适应这个复杂的社会的，所以才会随着孩子的长大慢慢变弱直至消失吧。&lt;/p&gt;
&lt;p&gt;经历与思维方式改变之间的关系就像先有鸡还是先有蛋的问题一样难解，两者互相关联互为因果，说不清是谁改变了谁，也许在这两者之外还有第三种力量存在吧，它把握了我们的方向。&lt;/p&gt;
&lt;p&gt;举目望日，不见长安。&lt;/p&gt;&lt;/div&gt;</description><category>凡思</category><guid>http://qytz.github.io/posts/si-wei-fang-shi-de-gai-bian-shi-yi-jian-xi-si-kong-ji-de-shi/</guid><pubDate>Sun, 17 Jan 2016 13:17:58 GMT</pubDate></item><item><title>凡思1</title><link>http://qytz.github.io/posts/fan-si-1/</link><dc:creator>lennyh</dc:creator><description>&lt;div&gt;&lt;p&gt;玩了好久的德州扑克，但是水平还是一般，输输赢赢的。说是好久其实就是半年的样子，但是其中的心路历程与这一年三月份开始的入市炒股票的经历相似，且最近思考得出的结论与人生道理暗自契合，因此暂做总结。&lt;/p&gt;
&lt;p&gt;开始玩德州扑克是朋友的推荐，是抱着与斗地主稍微有一点点儿不同的心态去玩的，对规则略熟悉之后基于新奇和其与股票有类似的地发，有一段时间玩的比较多。其实当时也没具体去想具体的关系，现在想来，该是德州的几次压注与股票的仓位控制的关联。当时想着玩德州的一些经验能够作用于股票操作上，且有股社区的推荐文章，渐渐熟悉了一下规则，比如开始两张牌比较大时应该积极加注减少牌局的参加人数以增加赢的几率。到这一阶段德州里的金币确实有所增长，但是依然波动较大。&lt;/p&gt;
&lt;p&gt;渐渐一段时间之后（其实经历了几次的大起大落之后），渐渐对此游戏的兴趣有所退化，玩的越来越少，感觉有些浪费时间。&lt;/p&gt;
&lt;p&gt;终于有一次下定决心，输光里边所有的金币然后卸载软件。于是每次都加注，气势压倒别的玩家。但是这样误打误撞发现这样是增加了波动的范围，却并不是会很快输掉所有金币。当然完全不看牌局直接ALLIN还是会输掉所有金币。&lt;/p&gt;
&lt;p&gt;于是就去尝试适当加大注的玩法，渐渐摸索出一些门道，并得出当前的结论：&lt;strong&gt;我们不可能也没必要把握住每次的机会，但是可以把握住几次大的机会，只要把握住这几此机会也就把握住了大的方向&lt;/strong&gt;。&lt;/p&gt;&lt;/div&gt;</description><category>凡思</category><guid>http://qytz.github.io/posts/fan-si-1/</guid><pubDate>Thu, 31 Dec 2015 14:26:44 GMT</pubDate></item><item><title>系统安全的思考</title><link>http://qytz.github.io/posts/tech/system_security_thought/</link><dc:creator>lennyh</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;strong&gt;世上并没有绝对的安全，只有安全成本的问题。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;真正的安全不过是一种意识。&lt;/strong&gt;&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;过往&lt;/h2&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;网络安全&lt;/h3&gt;
&lt;p&gt;工作相关，做的一直是跟系统安全相关的东西。&lt;/p&gt;
&lt;p&gt;前几年的时候在做的是网络安全，所谓的网络安全。&lt;/p&gt;
&lt;p&gt;说是网络安全，其实跟安全的关系不是很大，主要还是做网络设备，支持各种协议及功能，
还要尽可能地提高性能。&lt;/p&gt;
&lt;p&gt;跟安全的那点儿关系就是，在网络设备里面嵌入了部分跟安全相关的功能。&lt;/p&gt;
&lt;p&gt;想来，像访问包过滤（很多厂商也叫ACL，访问控制列表），NAT转换这些跟安全的关联性也不大
吧，他们是更倾向于控制和管理的功能；DPI协议识别呢？算是个基础功能吧，接下来可以根据
识别结果做控制与分析，也可以继续深入的做攻击防御。&lt;/p&gt;
&lt;p&gt;那么真正跟安全密切相关的功能有哪些呢？
MAC/IP绑定，攻击防护，网页防篡改等，这在网络安全设备像硬件防火墙这些，的功能中，
着实的算不算主要的功能吧，也不常用。只是说多一个功能就多一个卖点。&lt;/p&gt;
&lt;p&gt;其实网路安全设备很少关注自身的安全，挺多厂商把侧重点放在了性能上面。&lt;/p&gt;
&lt;p&gt;真的有可以提供整体安全方案的厂商吗？我是不信的，至少国内的厂商是这样的吧。
并不是说这些设备没有必要，确实很多功能还是很好的，但是跟系统安全相差的还是很远的吧。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;现今&lt;/h2&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;真正的系统安全&lt;/h3&gt;
&lt;p&gt;换过工作之后负责系统的一个安全模块，对安全有了稍微深入一点的理解。&lt;/p&gt;
&lt;p&gt;安全与易用，在某种程度上会有一些冲突，但这个程度肯定不会很大。&lt;/p&gt;
&lt;p&gt;易用也是一种安全，想用户所想。
系统遭遇到安全威胁时，用户能想到的，系统帮他去做了，用户没有想到的，
系统也帮他做好了，系统也帮他做了，这是易用，也是安全。&lt;/p&gt;
&lt;p&gt;因此，系统的正确行为定义也是安全的基础，在威胁出现时不能做出正确响应，就没有安全可言了。&lt;/p&gt;
&lt;p&gt;安全是不能有短板的，不仅要保证数据的安全，还要保证用户输入的安全，传输的安全等等，
缺了任何一个环节，就像系统有了漏洞一样，攻击者顺着这个漏洞可以获取系统中的很多东西。&lt;/p&gt;
&lt;p&gt;安全的核心工作应该是在后台默默完成的，很少的提示用户，更很少让用户来选择，
就像武侠小说中的扫地僧，绝大多数时候用户都意识不到他的存在，他只是在后台默默的做着
自己的工作，他的存在只是为了那突然的攻击出现的时候。&lt;/p&gt;
&lt;p&gt;稳定也是一种安全，我们无法保证每一次的修改都可以做到全系统的测试，而每次修改对系统
哪些模块有影响又是不完全预知的，尤其是系统的基础架构，略一更改影响面都很大。系统不
稳定就很容易出问题。&lt;/p&gt;
&lt;p&gt;其实，安全是一种意识，这种意识应该无处不在。
开发中的安全意识保证我们的系统漏洞更少，系统更稳健。
如果我们在开发中测试代码随便写，变量不初始化，溢出不检查，系统就很容易被攻击。&lt;/p&gt;
&lt;p&gt;使用中的安全意识保证了我们自己这个系统更加不容易被骗。
我们自己如果更加的注意自己的隐私不随意泄露，遇到电话/网络诈骗时可以多核实，社会
工程学也不那么容易就获取到我们的电话、邮箱、密码等信息了。&lt;/p&gt;
&lt;p&gt;只要在系统的所有环节做到一般性的防护，就已经比在系统的关键环节做很强的防护但在
其他环节不防护安全很多了。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;将来&lt;/h2&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;系统的安全机制&lt;/h3&gt;
&lt;p&gt;系统还是要提供必要的基础的安全机制供其他的系统组件使用的。&lt;/p&gt;
&lt;p&gt;如果需要系统提供的一些基础功能需要每个系统组件自己实现并维护，轮子重复造不说，
安全隐患的增加也是很严重的，因为保证这些基础功能的安全变的更加的麻烦。修复起来也很麻烦。&lt;/p&gt;
&lt;p&gt;系统的安全机制做的好，省了很多的麻烦。&lt;/p&gt;
&lt;p&gt;我们需要更加深入的研究与实现系统的安全机制。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>security</category><category>tech</category><category>tech_misc</category><guid>http://qytz.github.io/posts/tech/system_security_thought/</guid><pubDate>Wed, 14 Jan 2015 04:48:26 GMT</pubDate></item><item><title>小结LDAP</title><link>http://qytz.github.io/posts/tech/ldap_summury/</link><dc:creator>lennyh</dc:creator><description>&lt;div&gt;&lt;div class="section" id="ldap"&gt;
&lt;h2&gt;LDAP定义&lt;/h2&gt;
&lt;p&gt;本文不打算重复LDAP的标准定义，仅谈一下自己的理解。&lt;/p&gt;
&lt;p&gt;LDAP译为轻量级目录访问协议，一般网上经常拿其与关系型数据库做类比并比较他们的不同。&lt;/p&gt;
&lt;p&gt;事实上，LDAP既不是数据库也不是存储数据的方法，而是用来访问数据的方法。LDAP可以访问的
是存储在目录信息树（Directory Information Tree (DIT)）中的数据。&lt;/p&gt;
&lt;p&gt;目录信息树存储数据的方法与关系型数据库非常的不同。关系型数据库的数据是存储在某一数据库
的某一数据表中的某以记录内的，因此数据库中定位一条记录数据需要三个要素：数据库、
数据表、记录号；目录信息树存储数据的方式是树状结构，定位一条数据的方法是从树根到叶子节点
的唯一路径，数据就存储在叶子节点中。&lt;/p&gt;
&lt;p&gt;由此可见，LDAP与关系型数据库类比其实是两种数据存储与访问方式的类比。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;LDAP是访问目录信息树中数据的协议&lt;/h3&gt;
&lt;p&gt;事实上，LDAP仅定义了访问协议，数据的真实存储方式并不在LDAP的考量范围内，即只要提供了
目录访问接口的数据都可以通过LDAP协议来访问，如果关系型数据库实现了该接口也是可以通过
LDAP协议来反问的。从这个角度来讲，确实不应该将LDAP与关系型数据库做类比。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;LDAP特性&lt;/h2&gt;
&lt;p&gt;且LDAP对数据的读取和查询做了优化，并不适用于经常变动的数据。&lt;/p&gt;
&lt;p&gt;LDAP不定义客户端和服务端的工作方式，但会定义客户端和服务端的通信方式，
另外，LDAP还会定义LDAP数据库的访问权限及服务端数据的格式和属性。&lt;/p&gt;
&lt;p&gt;LDAP有三种基本的通信机制：没有处理的匿名访问；基本的用户名、密码形式的认证；使用SASL、SSL的安全认证方式。LDAP和很多其他协议一样，基于tcp/ip协议通信，注重服务的可用性、信息的保密性等等。部署了LDAP的应用不会直接访问目录中的内容，一般通过函数调用或者API，应用可以通过定义的C、Java的API进行访问，Java应用的访问方式为JNDI(Java Naming and Directory Interface)。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;LDAP结构&lt;/h2&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;目录信息树&lt;/h3&gt;
&lt;p&gt;目录信息树以目录条目（entry）来存储和组织数据，每一个目录条目通常描述一个对象（例如：一个人），
目录条目有一个唯一名（DN，distinguished name）进行标识。DN由一系列的相对唯一名（RDN，relative distinguished name）来标识。每一个目录条目由一或多个属性来描述该条目，例如描述人的条目有一个
电话号码的属性。&lt;/p&gt;
&lt;p&gt;引用一张 &lt;a class="reference external" href="http://www.redbooks.ibm.com/abstracts/sg244986.html"&gt;Understanding LDAP
Design and Implementation&lt;/a&gt; 的图示，&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://qytz.github.io/galleries/ldap_dit.png"&gt;&lt;img alt="ldap dir info tree" src="http://qytz.github.io/files/ldap_dit.png"&gt;&lt;/a&gt;
&lt;p&gt;目录条目根据他们在目录信息树中的位置命名，上图底部的目录条目的DN唯一名是:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cn=John Smith,ou=people,o=ibm,c=us.
The organizational group people has the DN of ou=people,o=ibm,c=us.
&lt;/pre&gt;
&lt;p&gt;LDAP的查询等操作语句在这里就不介绍了，有需求的可以在参考资料中找。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;LDAP安全&lt;/h2&gt;
&lt;p&gt;LDAP安全相关的资料请参考 &lt;a class="reference external" href="http://drops.wooyun.org/tips/967"&gt;LDAP注入与防御剖析&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2&gt;LDAP服务器配置&lt;/h2&gt;
&lt;p&gt;请参考 &lt;a class="reference external" href="http://wiki.jabbercn.org/index.php?title=XEP-0216&amp;amp;oldid=115"&gt;OpenLDAP管理员指南&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://drops.wooyun.org/tips/967"&gt;LDAP注入与防御剖析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.redbooks.ibm.com/abstracts/sg244986.html"&gt;Understanding LDAP Design and Implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://wiki.jabbercn.org/index.php?title=XEP-0216&amp;amp;oldid=115"&gt;OpenLDAP管理员指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>ldap</category><category>tech</category><guid>http://qytz.github.io/posts/tech/ldap_summury/</guid><pubDate>Wed, 14 Jan 2015 04:46:26 GMT</pubDate></item><item><title>VPN 高级选项那些事</title><link>http://qytz.github.io/posts/tech/vpn_advance_options_misc/</link><dc:creator>lennyh</dc:creator><description>&lt;div&gt;&lt;div class="section" id="vpn"&gt;
&lt;h2&gt;一、VPN高级选项&lt;/h2&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;VPN高级选项有哪些，都是什么意思&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;DNS 搜索域&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;These are for the mechanism for going from a machine name to a Fully Qualified Domain Name.&lt;/p&gt;
&lt;p&gt;DNS searches can only look at a Fully Qualified Domain Name, such as mymachine.example.com. But, it's a pain to type out mymachine.example.com, you want to be able to just type mymachine.&lt;/p&gt;
&lt;p&gt;Using Search Domains is the mechanism to do this. If you type a name that does not end with a period, it knows it needs to add the search domains for the lookup. So, lets say your Search Domains list was: example.org, example.com&lt;/p&gt;
&lt;p&gt;mymachine&lt;/p&gt;
&lt;p&gt;would try first mymachine.example.org, not find it, then try mymachine.example.com, found it, now done.&lt;/p&gt;
&lt;p&gt;mymachine.example.com&lt;/p&gt;
&lt;p&gt;would try mymachine.example.com.example.org (remember, it doesn't end with a period, still adds domains), fail, then mymachine.example.com.example.com, not find it, fall back to mymachine.example.com, found it, now done&lt;/p&gt;
&lt;p&gt;mymachine.example.com. Ends with a period, no searching, just do mymachine.example.com&lt;/p&gt;
&lt;p&gt;Soooo.....&lt;/p&gt;
&lt;p&gt;If you have your own DNS domain such as example.com, put it there. If not, ignore it. It really is more corporate than a home setting.&lt;/p&gt;
&lt;p class="last"&gt;参考 &lt;a class="reference external" href="http://superuser.com/questions/184361/what-is-the-search-domains-field-for-in-the-tcp-ip-dns-settings-control-panel"&gt;What is the “Search Domains” field for in the tcp/ip DNS settings control panel/preference pane for?&amp;gt;&lt;/a&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;DNS 服务器&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;域名系统（英文：Domain Name System，縮寫：DNS）是因特网的一项服务。它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便的访问互联网。DNS 使用TCP和UDP端口53。当前，对于每一级域名长度的限制是63个字符，域名总长度则不能超过253个字符。&lt;/p&gt;
&lt;p class="last"&gt;参考 &lt;a class="reference external" href="http://zh.wikipedia.org/zh/%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F"&gt;域名系统&lt;/a&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;转发路线&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;即转发路由，因DNS服务器不提供任何服务，因此所有的请求都需要经过转发才能到达可以响应请求的服务器，转发路线即配置发往哪些地址请求的需经过VPN转发。&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;为什么需要这些选项&lt;/h3&gt;
&lt;p&gt;这些选项其实只是一些基础的网络参数，因此所有的网络连接（包括VPN）都需要这些选项。但是并不是所有的网络连接都需要手动配置这些参数。那么为什么VPN更加的需要配置这些参数呢？&lt;/p&gt;
&lt;p&gt;VPN是一种常用于连接中、大型企业或团体与团体间的私人网络的通讯方法。虚拟私人网络的讯息透过公用的网络架构（例如：互联网）来传送内联网的网络讯息。这种技术可以用不安全的网络（例如：互联网）來傳送可靠、安全的訊息。[摘自 &lt;a class="reference external" href="http://zh.wikipedia.org/zh/%E8%99%9B%E6%93%AC%E7%A7%81%E4%BA%BA%E7%B6%B2%E8%B7%AF&amp;gt;"&gt;危机百科&lt;/a&gt; ]&lt;/p&gt;
&lt;p&gt;DNS请求呢？在未配置VPN之前，我们使用的是不安全网络上的DNS服务器，如果连接到VPN之后我们仍然连接不安全网络上的DNS服务器，如何保证我们的数据安全？
DNS搜索域是一个方便使用的选项。&lt;/p&gt;
&lt;p&gt;路由则指定了哪些数据是需要VPN网络来保护的，如果不指定，或者系统中所有的流量都经过VPN，但是VPN连接到的私有网络并不能提供不安全网络中所有的网络请求；或者
系统中所有的流量都不经过VPN服务器，连接VPN干嘛，当摆设吗？&lt;/p&gt;
&lt;p&gt;由此可见，这些网络高级选项在VPN的配置中还是很有必要的。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="connman"&gt;
&lt;h2&gt;二、关于connman&lt;/h2&gt;
&lt;p&gt;使用connman管理系统网络连接的例子并不多，网络上相关的资料也很少。
万幸的是，connman自带的文档(doc目录)大概可以把connman的设计原则和使用方法解释清除了。
以下内容及为参考该文档及源代码以及本人的推测得来的，不一定准确。&lt;/p&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;connman是如何管理所有连接的&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
src/provider.c  -- 管理connman中每一个（不是每一种）连接，保存连接。
src/service.c   -- 管理连接服务。
src/task.c  -- connman中对连接的代码，负责创建与维护真正的连接进程。
&lt;/pre&gt;
&lt;p&gt;这几个代码文件大概实现了connman连接管理的框架，但是新建连接后还需要设置很多的网络参数，
等等，正是这一部分使得connman显得更加的复杂。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="connman-dns"&gt;
&lt;h3&gt;connman是如何管理网络参数的（路由、DNS等）&lt;/h3&gt;
&lt;p&gt;connman中对网络参数的管理是基于连接的，即每个连接都有不同的网络参数配置，该连接生效时connman会根据
连接属性更新系统的网络参数。&lt;/p&gt;
&lt;p&gt;connman封装了很多对系统网络参数修改的API，如下列举部分:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
src/inet.c  -- 实现对系统路由的配置
src/ipconfig.c  -- 实现对系统地址的配置
src/resolver.c  -- 实现对系统DNS的配置，connman有选项支持dns代理
&lt;/pre&gt;
&lt;div class="note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;connman-vpn与上述描述并不完全一致。
当然，vpn连接也是由connman_task创建具体的任务来连接的，但是。
vpn/vpn-manager.c提供新建/删除VPN连接的功能(create/remove/get_connections...)。
vpn/vpn-provider.c提供了vpn连接/断开功能(do_connect/do_disconnect...)。
vpn连接建立/删除时会发送ConnectionAdded/ConnectionRemoved信号，
vpn连接时会发送PropertyChanged信号。
connman的vpn插件会监听这些信号，在新建/删除vpn连接时会在connman进程中建立该连接的provider及service。
connman监听到PropertyChanged信号时会根据属性设置系统当前的网络参数（dns等）。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;推荐文档阅读顺序：
vpn-overview.txt -&amp;gt; vpn-manager-api.txt -&amp;gt; vpn-connection-api.txt&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="qt-qml-and-d-bus"&gt;
&lt;h2&gt;四、Qt 、QML and D-Bus&lt;/h2&gt;
&lt;p&gt;Connman是以daemon进程在系统后台运行的，要访问Connman提供的服务，只能通过进程间通信类似的机制。
事实上Connman提供的服务都是以D-Bus方法即信号作为API接口的。&lt;/p&gt;
&lt;p&gt;例如，新建/删除VPN、连接VPN的接口如下：&lt;/p&gt;
&lt;pre class="code c"&gt;&lt;a name="rest_code_02386afd7b114b629a146cc9c871961d-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;DBusMessage&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DBusConnection&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DBusMessage&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_02386afd7b114b629a146cc9c871961d-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;DBusMessage&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DBusConnection&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DBusMessage&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_02386afd7b114b629a146cc9c871961d-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;DBusMessage&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;do_connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DBusConnection&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DBusMessage&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;div class="section" id="qtd-bus"&gt;
&lt;h3&gt;Qt对D-Bus的支持&lt;/h3&gt;
&lt;p&gt;Qt对D-Bus的支持算是基本完善，该有的都可以有，不该有的可能会可以有。（：D）&lt;/p&gt;
&lt;p&gt;可以通过Qt中D-Bus相关的库函数创建D-Bus服务，或者使用别人提供的服务。对发送接收数据类型的支持也比较完整，不仅能够
收发基本的整数、字符串等，复杂的字典、数组等自然也不在话下。&lt;/p&gt;
&lt;p&gt;但是Qt对DBUS_TYPE_STRUCT的支持需要稍多做一些工作，下面的章节会有介绍。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="qmld-bus"&gt;
&lt;h3&gt;QML对D-Bus的支持&lt;/h3&gt;
&lt;p&gt;很遗憾，QML原生并不支持D-Bus，但是可以通过两种变通的途径使用。
第一是，在C++代码中封装调用D-Bus的接口，并注册到QML中。
第二种，是采用非QT官方的插件，实现，例如： &lt;a class="reference external" href="https://github.com/nemomobile/nemo-qml-plugin-dbus"&gt;Nemo Mobile D-Bus QML Plugin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;好吧，其实是一种，第二种其实同样是C++代码中封装了调用D-Bus的接口，但是除此之外，还有什么办法可以扩展QML不支持的功能吗？&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="qtd-busdbus-type-struct"&gt;
&lt;h3&gt;Qt对D-Bus中DBUS_TYPE_STRUCT的支持&lt;/h3&gt;
&lt;p&gt;Qt有自己的类型系统，不知是该庆幸还是该懊恼。
Qt的类型系统极大的丰富了我们的精神文化生活，噢不，是极大的方便了我们的开发，QVariant，信号/槽（QObject）等等。
但是这样一来我们自己定义的类型却无法使用这些方便的特性，而且Qt D-Bus也不支持自定义类型的发送与接收。&lt;/p&gt;
&lt;p&gt;幸运的是，上帝在关上这扇门的时候悄悄给我们开了一扇窗，我们可以将自己定义的类型注册到Qt的元类型系统中去，
这样我们自己定义的类型也可以使用Qt提供的很多方便的特性了，最重要的是我们自定义的结构也可以通过Qt的D-Bus接口发送与接收了。&lt;/p&gt;
&lt;p&gt;创建方法在此不表，无非是在适当的地方增加几次调用:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Q_DECLARE_METATYPE(Type)；
int qRegisterMetaType(const char * typeName)；
int qDBusRegisterMetaType()；
&lt;/pre&gt;
&lt;p&gt;详情参看如下链接：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://qtdocs.sourceforge.net/index.php/%E5%88%9B%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89Qt%E7%B1%BB%E5%9E%8B"&gt;创建自定义Qt类型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.qtcentre.org/threads/26871-Problems-with-marshalling-a-struct-to-Qt-DBus"&gt;Problems with marshalling a struct to Qt/DBus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="linux"&gt;
&lt;h2&gt;五、Linux 连接管理&lt;/h2&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;都有哪些连接管理实现&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Android：&lt;a class="reference external" href="http://developer.android.com/reference/android/net/ConnectivityManager.html"&gt;ConnectivityManager&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://wiki.gnome.org/Projects/NetworkManager"&gt;NetworkManager&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;NetworkManager is a set of co-operative tools that make networking simple and straightforward. Whether Wi-Fi, wired, bond, bridge, 3G, or Bluetooth, NetworkManager allows you to quickly move from one network to another: once a network has been configured and joined, it can be detected and re-joined automatically the next time its available.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://01.org/zh/connman?langredirect=1"&gt;ConnMan&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;ConnMan is a daemon for managing Internet connections within embedded device and integrates a vast range of communication features usually split between many daemons such as DHCP, DNS and NTP. The result of this consolidation is low memory consumption with a fast, coherent, synchronized reaction to changing network conditions.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;为什么需要连接管理&lt;/h3&gt;
&lt;p&gt;几乎所有的现代操作系统都有统一的连接管理，这是为什么呢？
其实这个问题我也不知道。所以，下面的内容纯属揣测，如有不对恳请指正。&lt;/p&gt;
&lt;p&gt;大概是有两个原因吧，我想。
一是便于用户的配置，试想，用户连接上一个新的网络（有线、无线、VPN等）后，要手动的去修改DNS、路由、地址等信息，
肯定是不可原谅的，或者进一步，需要在不同的位置分别通过不用的程序去配置不同的网络参数，少改了一项网络可就不正常了哦。&lt;/p&gt;
&lt;p&gt;二是便于网络的管理，如果每种连接自己管自己的网络配置，可是这些配置的生效可是在一个系统上的，于是每个程序都去修改
DNS配置，路由，地址等信息，你确保不会改乱？&lt;/p&gt;
&lt;p&gt;其实反观其他子系统，声音肯定要在所有要播放/录制声音的程序后面有一个daemon来负责系统的混音及播放工作，不可能每个程序各播各的，你肯定不原因听到那种声音的。
显示子系统不可能是每个想要在屏幕上显示东西的程序自己向屏幕上写吧，这样我显示了一个窗口，你显示了一个通知，我有显示了一个文档，你确定用户能够看得请？所以还是需要有显示管理器在后面跑的。&lt;/p&gt;
&lt;p&gt;同理，系统的网络配置大家一起改，你确定不会改乱？
这大概是一个趋势吧，只有一种或者两种网络连接的时候，我可以随便改，要是系统有很多种连接类型，可就不能胡来了。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>tech</category><category>vpn</category><guid>http://qytz.github.io/posts/tech/vpn_advance_options_misc/</guid><pubDate>Wed, 24 Dec 2014 07:08:26 GMT</pubDate></item><item><title>JavaScript的移位运算与IP地址处理</title><link>http://qytz.github.io/posts/tech/js_bit_operation/</link><dc:creator>lennyh</dc:creator><description>&lt;div&gt;&lt;div class="section" id="js"&gt;
&lt;h2&gt;JS左移运算符号位的问题&lt;/h2&gt;
&lt;p&gt;最近在做项目时有一个需求，将用户输入的 &lt;em&gt;地址/掩码&lt;/em&gt; 对解析出来，并将数字掩码转换成点分的格式。&lt;/p&gt;
&lt;p&gt;想到在C代码里面应该还算容易实现，通过最大32位整数位移就可完成，但是在 JavaScript 中如何实现还是很不清楚的。&lt;/p&gt;
&lt;p&gt;因为考虑到JavaScript是弱类型的语言，首先就会遇到数字和字符串的转换等问题，接着还有按位操作的问题也不知道在JavaScript中如何实现。
然后开始查询资料尝试解决这些问题。数字和字符串类型的转换是不需要的，写代码尝试了下应该JavaScript自动做了类型转换。&lt;/p&gt;
&lt;p&gt;首先想到的思路是根据最大32位整数位移获取掩码对应的整数值，然后将结果转换成点分格式的字符串。在网上找到了如下的代码。&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_8bfea4a2a8c84df0a0bd46deba53810e-1"&gt;&lt;/a&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ip2long&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_8bfea4a2a8c84df0a0bd46deba53810e-2"&gt;&lt;/a&gt;    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ipl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_8bfea4a2a8c84df0a0bd46deba53810e-3"&gt;&lt;/a&gt;    &lt;span class="nx"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'.'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;octet&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_8bfea4a2a8c84df0a0bd46deba53810e-4"&gt;&lt;/a&gt;        &lt;span class="nx"&gt;ipl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_8bfea4a2a8c84df0a0bd46deba53810e-5"&gt;&lt;/a&gt;        &lt;span class="nx"&gt;ipl&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;octet&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_8bfea4a2a8c84df0a0bd46deba53810e-6"&gt;&lt;/a&gt;    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;a name="rest_code_8bfea4a2a8c84df0a0bd46deba53810e-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ipl&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_8bfea4a2a8c84df0a0bd46deba53810e-8"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_8bfea4a2a8c84df0a0bd46deba53810e-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_8bfea4a2a8c84df0a0bd46deba53810e-10"&gt;&lt;/a&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;long2ip&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ipl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_8bfea4a2a8c84df0a0bd46deba53810e-11"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ipl&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;'.'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
&lt;a name="rest_code_8bfea4a2a8c84df0a0bd46deba53810e-12"&gt;&lt;/a&gt;        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ipl&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;'.'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
&lt;a name="rest_code_8bfea4a2a8c84df0a0bd46deba53810e-13"&gt;&lt;/a&gt;        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ipl&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;'.'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
&lt;a name="rest_code_8bfea4a2a8c84df0a0bd46deba53810e-14"&gt;&lt;/a&gt;        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ipl&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_8bfea4a2a8c84df0a0bd46deba53810e-15"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;有了这两个方法就可以将计算得到的掩码整数值转换成点分格式了。
但是在做位运算的时候发现了一个坑，在一边查资料一边尝试实现的第一个版本中，掩码为0和掩码为32产生的结果一样，都是255.255.255.255。&lt;/p&gt;
&lt;!-- note
JavaScript的左移运算保留数字的符号位。例如，如果把 -2 左移 5 位，得到的是 -64，而不是 64。符号仍然存储在第32位中。 即使输出二进制字符串形式的负数，显示的也是负号形式（例如，-2 将显示 -10。） --&gt;
&lt;p&gt;看来此方案不可行，接着查资料发现了一个新的思路，根据掩码生成四个小于等于255的值，将这四个值拼成点分格式。这样实现避免了对符号位的操作，甚好。&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_ffd11969fb984a43ab357eb7b185632e-1"&gt;&lt;/a&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createNetmaskAddr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bitCount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_ffd11969fb984a43ab357eb7b185632e-2"&gt;&lt;/a&gt;  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;mask&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;a name="rest_code_ffd11969fb984a43ab357eb7b185632e-3"&gt;&lt;/a&gt;  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_ffd11969fb984a43ab357eb7b185632e-4"&gt;&lt;/a&gt;    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bitCount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_ffd11969fb984a43ab357eb7b185632e-5"&gt;&lt;/a&gt;    &lt;span class="nx"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;a name="rest_code_ffd11969fb984a43ab357eb7b185632e-6"&gt;&lt;/a&gt;    &lt;span class="nx"&gt;bitCount&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_ffd11969fb984a43ab357eb7b185632e-7"&gt;&lt;/a&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_ffd11969fb984a43ab357eb7b185632e-8"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'.'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_ffd11969fb984a43ab357eb7b185632e-9"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/1908492/unsigned-integer-in-javascript"&gt;Unsigned Integer in Javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.w3school.com.cn/js/pro_js_operators_bitwise.asp"&gt;ECMAScript 位运算符&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/21903482/cidr-to-netmask-converion-in-javascript"&gt;CIDR to netmask converion in javascript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>js</category><category>tech</category><guid>http://qytz.github.io/posts/tech/js_bit_operation/</guid><pubDate>Wed, 17 Dec 2014 11:24:26 GMT</pubDate></item><item><title>Hello Pelican &amp; GitHub Pages</title><link>http://qytz.github.io/posts/helloworld/</link><dc:creator>lennyh</dc:creator><description>&lt;div&gt;&lt;p&gt;不知不觉做技术也已经四年有余了，四年来不管在技术、工作及生活中都积累了一些不错的经验教训（以及很多好玩的东西）。&lt;/p&gt;
&lt;p&gt;但是碍于个人的懒惰，虽偶有尝试，却从未能够坚持一直把学到的东西记录下来供以后。&lt;/p&gt;
&lt;p&gt;于是，很多好东西消逝在时光中，余实在不忍继续这样下去。&lt;/p&gt;
&lt;p&gt;于是，下定决心，在此搭建此平台，希望自己能够坚持不懈，把那些值得记录的东西记录下来。&lt;/p&gt;
&lt;p&gt;愿有机会满怀高兴的回翻这些有趣的东西，愿有趣的东西越来越多。&lt;/p&gt;&lt;/div&gt;</description><guid>http://qytz.github.io/posts/helloworld/</guid><pubDate>Sun, 30 Nov 2014 14:58:26 GMT</pubDate></item></channel></rss>